package com.accolite.au.y2021.mt.evaluation.hiteshQ5.model;

/**
 * Counter Class Which Is Used To Increment All the 3 Counters.
 **/
public class Counter {
    /**
     * 1st Counter Which is Incremented By Thread1.
     **/
    volatile int c1;

    /**
     * 2nd Counter Which is Incremented By Thread2.
     **/
    volatile int c2;

    /**
     * 3rd Counter Which is Incremented By Thread3.
     **/
    int c3;

    /**
     * Boolean Value to Check if the value generated by Thread1 is Consumed By Thread2 or Not.
     **/
    boolean SecondConsumed = true;

    /**
     * Boolean Value to Check if the value generated by Thread2 is Consumed By Thread3 or Not.
     **/
    boolean ThirdConsumed = true;

    /**
     * Max No Till which the counter should be incremented.
     **/
    int maxCount = Integer.MIN_VALUE;

    /**
     * Boolean Value to Call Other Thread To Terminate Work.
     **/
    boolean terminateExecution = false;

    public Counter(int maxCount) {
        this.maxCount = maxCount;
        c1 = 0;
        c2 = 0;
        c3 = 0;
    }


    public int getC1() {
        return c1;
    }

    public int getC2() {
        return c2;
    }

    public int getC3() {
        return c3;
    }

    public boolean isSecondConsumed() {
        return SecondConsumed;
    }

    public void setSecondConsumed(boolean secondConsumed) {
        SecondConsumed = secondConsumed;
    }

    public boolean isThirdConsumed() {
        return ThirdConsumed;
    }

    public void setThirdConsumed(boolean thirdConsumed) {
        ThirdConsumed = thirdConsumed;
    }

    public int getMaxCount() {
        return maxCount;
    }


    public boolean isTerminateExecution() {
        return terminateExecution;
    }

    public void setTerminateExecution(boolean terminateExecution) {
        this.terminateExecution = terminateExecution;
    }

    /**
     * Function to Increment the first Counter.
     **/
    public synchronized void increment1() {
        c1++;
    }

    /**
     * Function to Increment the Second Counter.
     **/
    public synchronized void increment2() {
        c2 += 2;
    }

    /**
     * Function to Increment the Third Counter.
     **/
    public synchronized void increment3() {
        c3++;
    }

    /**
     * Function to Take Wait to lock the Counter Object.
     **/
    public synchronized void takeWait() {
        try {
            wait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    /**
     * Function to notify Others to Take Lock on Counter Object.
     **/
    public synchronized void notifyOthers() {
        notify();
    }

}
